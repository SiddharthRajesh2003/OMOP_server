Metadata-Version: 2.1
Name: OMOP_server
Version: 0.1.0
Summary: This package initializes the tables in OMOP CDM as objects that can be called upon and used to perform the ETL process
Home-page: https://github.com/SiddharthRajesh2003/OMOP_server
Author: Siddharth Rajesh
Author-email: Siddharth Rajesh <siddharth.rajesh03@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/SiddharthRajesh2003/OMOP_server
Project-URL: Repository, https://github.com/SiddharthRajesh2003/OMOP_server
Project-URL: Issues, https://github.com/SiddharthRajesh2003/OMOP_server/issues
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: absl-py==2.2.2
Requires-Dist: asttokens
Requires-Dist: astunparse==1.6.3
Requires-Dist: certifi==2025.4.26
Requires-Dist: charset-normalizer==3.4.2
Requires-Dist: colorama
Requires-Dist: comm
Requires-Dist: contourpy==1.3.2
Requires-Dist: cycler==0.12.1
Requires-Dist: debugpy
Requires-Dist: decorator
Requires-Dist: delta==0.4.2
Requires-Dist: delta-spark==3.3.1
Requires-Dist: dotenv==0.9.9
Requires-Dist: exceptiongroup
Requires-Dist: executing
Requires-Dist: filelock==3.18.0
Requires-Dist: flatbuffers==25.2.10
Requires-Dist: fonttools==4.57.0
Requires-Dist: fsspec==2025.5.1
Requires-Dist: fuzzywuzzy==0.18.0
Requires-Dist: gast==0.6.0
Requires-Dist: google-pasta==0.2.0
Requires-Dist: greenlet==3.2.1
Requires-Dist: grpcio==1.71.0
Requires-Dist: h5py==3.13.0
Requires-Dist: huggingface-hub==0.33.2
Requires-Dist: idna==3.10
Requires-Dist: importlib-metadata
Requires-Dist: ipykernel
Requires-Dist: ipython
Requires-Dist: ipython-pygments-lexers
Requires-Dist: jedi
Requires-Dist: Jinja2==3.1.6
Requires-Dist: joblib==1.5.0
Requires-Dist: jupyter-client
Requires-Dist: jupyter-core
Requires-Dist: keras==3.9.2
Requires-Dist: kiwisolver==1.4.8
Requires-Dist: libclang==18.1.1
Requires-Dist: Markdown==3.8
Requires-Dist: markdown-it-py==3.0.0
Requires-Dist: MarkupSafe==3.0.2
Requires-Dist: matplotlib==3.10.1
Requires-Dist: matplotlib-inline
Requires-Dist: mdurl==0.1.2
Requires-Dist: ml-dtypes==0.5.1
Requires-Dist: mpmath==1.3.0
Requires-Dist: mssql-python==0.5.0
Requires-Dist: namex==0.0.9
Requires-Dist: nest-asyncio
Requires-Dist: networkx==3.5
Requires-Dist: numpy==2.1.3
Requires-Dist: opt-einsum==3.4.0
Requires-Dist: optree==0.15.0
Requires-Dist: packaging
Requires-Dist: pandas==2.2.3
Requires-Dist: parso
Requires-Dist: pickleshare
Requires-Dist: pillow==11.2.1
Requires-Dist: platformdirs
Requires-Dist: prompt-toolkit
Requires-Dist: protobuf==5.29.4
Requires-Dist: psutil
Requires-Dist: pure-eval
Requires-Dist: py4j==0.10.9.7
Requires-Dist: Pygments
Requires-Dist: pyodbc==5.2.0
Requires-Dist: pyparsing==3.2.3
Requires-Dist: pyspark==3.5.5
Requires-Dist: python-dateutil
Requires-Dist: python-dotenv==1.1.0
Requires-Dist: pytz==2025.2
Requires-Dist: pywin32==308; sys_platform == "win32"
Requires-Dist: PyYAML==6.0.2
Requires-Dist: pyzmq
Requires-Dist: regex==2024.11.6
Requires-Dist: requests==2.32.3
Requires-Dist: rich==14.0.0
Requires-Dist: safetensors==0.5.3
Requires-Dist: scikit-learn==1.6.1
Requires-Dist: scipy==1.15.2
Requires-Dist: seaborn==0.13.2
Requires-Dist: setuptools==78.1.1
Requires-Dist: six
Requires-Dist: spark==0.2.1
Requires-Dist: SQLAlchemy==2.0.40
Requires-Dist: stack-data
Requires-Dist: sympy==1.13.1
Requires-Dist: tensorboard==2.19.0
Requires-Dist: tensorboard-data-server==0.7.2
Requires-Dist: tensorflow==2.19.0
Requires-Dist: termcolor==3.1.0
Requires-Dist: threadpoolctl==3.6.0
Requires-Dist: tokenizers==0.21.2
Requires-Dist: torch==2.5.1
Requires-Dist: torchaudio==2.5.1
Requires-Dist: torchvision==0.20.1
Requires-Dist: tornado
Requires-Dist: tqdm==4.67.1
Requires-Dist: traitlets
Requires-Dist: transformers==4.53.1
Requires-Dist: typing-extensions
Requires-Dist: tzdata==2025.2
Requires-Dist: urllib3==2.4.0
Requires-Dist: wcwidth
Requires-Dist: Werkzeug==3.1.3
Requires-Dist: wheel==0.45.1
Requires-Dist: wrapt==1.17.2
Requires-Dist: zipp
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"

# OMOP Server

This directory contains a modular, extensible ETL framework for transforming healthcare data into the OMOP Common Data Model (CDM) using Python, SQLAlchemy, and advanced concept mapping. The system is designed for robust, high-performance data integration with SQL Server and other RDBMS backends.

---

## 📁 Directory Structure

```
omop_server/
│
├── models/         # SQLAlchemy ORM models and ETL logic for OMOP tables
│   ├── basetable.py
│   ├── person_id.py
│   ├── person.py
│   ├── visit_occurrence.py
│   ├── condition_occurrence.py
│   ├── procedure_occurrence.py
│   ├── observation_period.py
│   ├── concept_builder.py
│   ├── concept_relationship.py
│   ├── config.json
│   └── README.md
│
├── sql/            # Raw SQL scripts for table creation, validation, and data quality checks
│   ├── person.sql
│   ├── visit_occurrence.sql
│   ├── observation_period.sql
│   ├── functions.sql
│   └── README.md
│
├── utils/          # Utility modules for DB connections, concept mapping, config management, etc.
│   ├── utility.py
│   ├── connect.py
│   ├── transformerconceptmapper.py
│   ├── concept_mapper.py
│   ├── config_manager.py
│   ├── utility.py
│   └── README.md
│
├── requirements.txt
├── pyproject.toml
├── setup.py
├── .env
└── __init__.py
```

---

## 🏗️ Key Components

### Models (`models/`)
- **ParentBase**: Abstract base class for all OMOP tables, providing configuration, connection, and ETL utilities.
- **OMOP Table Models**: `person.py`, `visit_occurrence.py`, `condition_occurrence.py`, `procedure_occurrence.py`, `observation_period.py` implement OMOP CDM tables with batch ETL logic.
- **Concept/Vocabulary Models**: `concept_builder.py`, `concept_relationship.py` for loading and managing OMOP vocabularies.
- **Config**: `config.json` defines source-to-OMOP mappings and validation rules.

### SQL Scripts (`sql/`)
- Table creation scripts for OMOP CDM tables (optimized for SQL Server).
- Data validation and quality check queries.
- Reference data/vocabulary loaders.

### Utilities (`utils/`)
- **Database Utilities**: Secure engine creation, connection pooling, error handling.
- **ConceptMapper**: Advanced semantic mapping from source values to OMOP concepts (supports transformer models).
- **ConfigManager**: Loads and validates ETL configuration.
- **General Utilities**: Helper functions for SQL formatting, logging, etc.

---

## 🚀 Quick Start

1. **Setup Virtual Environment**
   ```bash
   python -m venv venv
   ```

1. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

2. **Configure environment**
   - Create a `.env` file with your DB credentials:
     ```
     USER=your_db_user
     PWD=your_db_password
     DB_URL=your_db_url
     DB_NAME=your_db_name
     ```

3. **Set up config**
   - Edit `models/config.json` to map your source columns to OMOP fields.

4. **Run ETL**
   - Example (Python):
     ```python
     from omop_server.models.visit_occurrence import VisitOccurrence
     visit = VisitOccurrence(schema='Reporting_Research')
     visit.set_config('config.json')
     visit.set_source('Cerner_Encounter', 'EncounterBASE')
     engine = visit.connect_db(os.getenv('DB_URL'), os.getenv('DB_NAME'))
     visit.create_table(engine)
     visit.insert_records(engine, batch_size=20000)
     ```

5. **Use SQL scripts**
   - Run scripts in `sql/` for manual table creation or validation as needed.

---

## ⚙️ Features

- **Modular ETL**: Each OMOP table is a class with its own ETL logic.
- **Batch Processing**: Efficient, memory-safe batch inserts with fallback strategies.
- **Semantic Concept Mapping**: Uses transformer models for mapping source values to OMOP concepts.
- **Validation**: Built-in source and OMOP compliance validation.
- **Logging & Monitoring**: Detailed progress, error, and performance logging.
- **SQL Server Optimizations**: Fast inserts, NOT ENFORCED constraints, efficient pagination.

---

## 📦 Dependencies

- `sqlalchemy`
- `pandas`
- `python-dotenv`
- `transformers`
- `pyodbc` (for SQL Server)
- See `requirements.txt` for full list.

---

## 📚 Documentation

- [models/README.md](models/README.md): Full details on ETL architecture, configuration, and usage.
- [utils/README.md](utils/README.md): Utility functions and advanced concept mapping.
- [sql/README.md](sql/README.md): SQL script usage and best practices.

---

## 🤝 Contributing

- Fork the repo and submit pull requests.
- Follow PEP 8 and add docstrings/type hints.
- Add tests for new features.


* This ETL framework is designed to streamline OMOP CDM implementation and ensure data quality in
